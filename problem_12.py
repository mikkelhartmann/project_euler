"""
Problem: The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
import itertools

flatten_iter = itertools.chain.from_iterable
def get_factors(n):
    return set(flatten_iter((i, n//i) 
                for i in range(1, int(n**0.5)+1) if n % i == 0))

def generate_triangular_number(n):
    return int((n*(n+1))/2)

# Verifying that I can reproduce the solution from the problem statement
number = 28
factors = get_factors(number)
print("The number", number, "has the factors:")
print(factors)
print("There are", len(factors), "factors")

# Finding the first triangular number with 500 or more factors
num_factors = 0
highest_factor = 0
not_found = True
idx = 100

while not_found:
    triangular_number = generate_triangular_number(idx)
    num_factors = len(get_factors(triangular_number))

    if (num_factors > highest_factor):
        highest_factor = num_factors
        print("number", triangular_number, "has", num_factors, "factors")

    if (num_factors >= 500):
        print("Found it!", triangular_number)
        not_found = False
    idx += 1